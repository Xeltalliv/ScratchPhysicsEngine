list Vector3;
listoffsets Vector3 3 {x:1, y:2, z:3};

namespace V3fn "Vector3 | " {
	variable free;
	variable zero;

	function new() {
		if(free > -1) {
			OUTPUT = free;
			free = Vector3[free]#1;
			Vector3[OUTPUT]#x = 0;
			Vector3[OUTPUT]#y = 0;
			Vector3[OUTPUT]#z = 0;
		} else {
			OUTPUT = Vector3.length;
			Vector3.push(0);
			Vector3.push(0);
			Vector3.push(0);
		}
	}
	function delete(elem) {
		if(elem != zero) {
			Vector3[elem]#1 = free;
			free = elem;
		}
	}
	function set(v1, x, y, z) {
		Vector3[v1]#x = x;
		Vector3[v1]#y = y;
		Vector3[v1]#z = z;
	}
	function clear(v1) {
		Vector3[v1]#x = 0;
		Vector3[v1]#y = 0;
		Vector3[v1]#z = 0;
	}
	function inverse(v1, v2) {
		Vector3[v2]#x = -Vector3[v1]#x;
		Vector3[v2]#y = -Vector3[v1]#y;
		Vector3[v2]#z = -Vector3[v1]#z;
	}
	function magnitude(v1) {
		const vec = Vector3[v1];
		OUTPUT = Math.sqrt(vec#x*vec#x + vec#y*vec#y + vec#z*vec#z);
	}
	function squareMagnitude(v1) {
		const vec = Vector3[v1];
		OUTPUT = vec#x*vec#x + vec#y*vec#y + vec#z*vec#z;
	}
	function normalize(v1, v2) {
		V3fn.magnitude(v1);
		if(OUTPUT > 0) {
			Vector3[v2]#x = Vector3[v1]#x / OUTPUT;
			Vector3[v2]#y = Vector3[v1]#y / OUTPUT;
			Vector3[v2]#z = Vector3[v1]#z / OUTPUT;
		}
	}
	function mul(v1, value, v2) {
		Vector3[v2]#x = Vector3[v1]#x * value;
		Vector3[v2]#y = Vector3[v1]#y * value;
		Vector3[v2]#z = Vector3[v1]#z * value;
	}
	function mulMat(v1, mat, v2) {
		const v = Vector3[v1];
		const m = Matrix3[mat];
		Vector3[v2]#x = v#x * m#1 + v#y * m#2 + v#z * m#3;
		Vector3[v2]#y = v#x * m#4 + v#y * m#5 + v#z * m#6;
		Vector3[v2]#z = v#x * m#7 + v#y * m#8 + v#z * m#9;
	}
	function div(v1, value, v2) {
		Vector3[v2]#x = Vector3[v1]#x / value;
		Vector3[v2]#y = Vector3[v1]#y / value;
		Vector3[v2]#z = Vector3[v1]#z / value;
	}
	function div1byIt(v1, v2) {
		Vector3[v2]#x = 1 / Vector3[v1]#x;
		Vector3[v2]#y = 1 / Vector3[v1]#y;
		Vector3[v2]#z = 1 / Vector3[v1]#z;
	}
	function add(v1, v2, v3) {
		Vector3[v3]#x = Vector3[v1]#x + Vector3[v2]#x;
		Vector3[v3]#y = Vector3[v1]#y + Vector3[v2]#y;
		Vector3[v3]#z = Vector3[v1]#z + Vector3[v2]#z;
	}
	function sub(v1, v2, v3) {
		Vector3[v3]#x = Vector3[v1]#x - Vector3[v2]#x;
		Vector3[v3]#y = Vector3[v1]#y - Vector3[v2]#y;
		Vector3[v3]#z = Vector3[v1]#z - Vector3[v2]#z;
	}
	function addScaled(v1, v2, scale, v3) {
		Vector3[v3]#x = Vector3[v1]#x + Vector3[v2]#x * scale;
		Vector3[v3]#y = Vector3[v1]#y + Vector3[v2]#y * scale;
		Vector3[v3]#z = Vector3[v1]#z + Vector3[v2]#z * scale;
	}
	function componentProduct(v1, v2, v3) {
		Vector3[v3]#x = Vector3[v1]#x * Vector3[v2]#x;
		Vector3[v3]#y = Vector3[v1]#y * Vector3[v2]#y;
		Vector3[v3]#z = Vector3[v1]#z * Vector3[v2]#z;
	}
	function dot(v1, v2) {
		OUTPUT = Vector3[v1]#x * Vector3[v2]#x + Vector3[v1]#y * Vector3[v2]#y + Vector3[v1]#z * Vector3[v2]#z;
	}
	function cross(v1, v2, v3) {
		Vector3[v3]#x = Vector3[v1]#y * Vector3[v2]#z - Vector3[v1]#z * Vector3[v2]#y;
		Vector3[v3]#y = Vector3[v1]#z * Vector3[v2]#x - Vector3[v1]#x * Vector3[v2]#z;
		Vector3[v3]#z = Vector3[v1]#x * Vector3[v2]#y - Vector3[v1]#y * Vector3[v2]#x;
	}
	function copy(v1, v2) {
		Vector3[v2]#x = Vector3[v1]#x;
		Vector3[v2]#y = Vector3[v1]#y;
		Vector3[v2]#z = Vector3[v1]#z;
	}
	function tangents(v1, v2, v3) {
		const orig  = Vector3[v1];
		const tang1 = Vector3[v2];
		const tang2 = Vector3[v3];

		if(Math.abs(orig#x) > Math.abs(orig#y)) {
			let s = 1 / Math.sqrt(orig#z*orig#z+orig#x*orig#x);

			tang1#x =  orig#z * s;
			tang1#y =  0;
			tang1#z = -orig#x * s;

			tang2#x =  orig#y * tang1#x;
			tang2#y =  orig#z * tang1#x - orig#x * tang1#z;
			tang2#z = -orig#y * tang1#x;
		} else {
			let s = 1 / Math.sqrt(orig#z*orig#z+orig#y*orig#y);

			tang1#x =  0;
			tang1#y = -orig#z * s;
			tang1#z =  orig#y * s;

			tang2#x =  orig#y * tang1#z - orig#z * tang1#y;
			tang2#y = -orig#x * tang1#z;
			tang2#z =  orig#x * tang1#y;
		}
	}
}
